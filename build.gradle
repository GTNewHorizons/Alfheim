apply plugin: 'forge'
apply plugin: 'kotlin'
apply plugin: 'idea'

def mainMod = true

buildscript {
	ext.kotlinVersion = '1.3.50'
	
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

repositories {
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven/"
	}
	maven {
		name "Mobius Repo"
		url "http://mobiusstrip.eu/maven"
	}
	ivy {
		name "MineTweaker3"
		artifactPattern "http://minetweaker3.powerofbytes.com/download/[module]-([classifier]-)[revision].[ext]"
	}
	maven {
		name "DVS1 Maven FS"
		url "http://dvs1.progwml6.com/files/maven"
	}
	mavenCentral()
}

version = mainMod ? "BETA-pre33.3" : "8"
group= "main"
archivesBaseName = mainMod ? "Alfheim" : "Alfheim-Modular"

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "minecraft"
}

configurations {
	embed
	compile.extendsFrom(embed)
}

dependencies {
	
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compile "codechicken:ForgeMultipart:1.7.10-1.2.0.345:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	compile "mcp.mobius.waila:Waila:1.5.10_1.7.10"
	
	compile name: "MineTweaker3", group: "minetweaker", version: "1.7.10-3.0.10B", classifier: "Dev-Full"
	
	// compile "mantle:Mantle:1.7.10-0.3.2.jenkins207:deobf"
	compile "tconstruct:TConstruct:1.7.10-1.8.8.build991:deobf"
	
	compile fileTree(dir: 'lib', include: ['*.jar'])
	if (mainMod)
		embed "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
	else
		compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
}

compileJava {
	options.encoding = "UTF-8"
	sourceCompatibility = targetCompatibility = '1.8'
}

sourceCompatibility = targetCompatibility = '1.8'
compileKotlin.kotlinOptions.jvmTarget = "1.8"

jar {
	from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
	
	manifest {
		if (mainMod) {
			attributes 'FMLAT': 'alfheim_at.cfg'
			attributes 'FMLCorePlugin': 'alfheim.common.core.asm.AlfheimHookLoader'
		} else {
			attributes 'FMLAT': 'alfmod_at.cfg'
			attributes 'FMLCorePlugin': 'alfmod.common.core.asm.AlfheimModularHookLoader'
		}
		
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
	
	if (mainMod) {
		exclude ("alfmod/**")
		exclude ("assets/alfmod/**")
		exclude ("META-INF/alfmod_at.cfg")
	} /*else {
		exclude ("alexsocol/**")
		exclude ("alfheim/**")
		exclude ("gloomyfolken/**")
		exclude ("ru/vamig/**")
		exclude ("vazkii/**")
		
		exclude ("assets/alfheim/**")
		exclude ("assets/botania/**")
		exclude ("assets/minecraft/**")
		exclude ("assets/thaumcraft/**")
				
		exclude ("META-INF/alfheim_at.cfg")
		
		exclude ("alfheim_logo.png")
		exclude ("credits.txt")
		exclude ("methods.bin")
	}*/
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
		
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
	
	rename '(.+_at.cfg)', 'META-INF/$1'
}

idea {
	module {
		inheritOutputDirs = false
		outputDir = file('build/classes/main/')
	}
}

subprojects {
	apply plugin: 'idea'
}